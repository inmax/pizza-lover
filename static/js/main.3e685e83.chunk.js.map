{"version":3,"sources":["components/Cover/index.js","components/Album/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Cover","props","className","Photo","Loadable","loader","loading","Album","useState","error","setError","isLoaded","setIsLoaded","pagination","items","setItems","total","setTotal","getPhotos","pag","a","url","fetch","then","res","json","result","arrayData","newItems","data","Array","isArray","map","photoData","src","get","width","height","title","useEffect","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","console","log","message","pageStart","loadMore","hasMore","key","photos","direction","renderImage","left","top","onClick","onClose","currentIndex","views","x","srcset","srcSet","caption","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.3e685e83.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = props => {\n  return (\n    <div>\n      <header className=\"App-header\">Cover</header>\n    </div>\n  );\n};\n\nexport default Cover; ","import React, { useState, useEffect, lazy, Suspense, useCallback } from \"react\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport Loadable from \"react-loadable\";\nimport get from \"lodash/get\";\n\nconst Loading = () => <p>Loading...</p>;\nconst Photo = Loadable({\n  loader: () => import(\"components/Photo\"),\n  loading: Loading\n});\n\nconst Album = () => {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [pagination, setPagination] = useState(0);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState();\n  const LIMIT = 5;\n\n  const imageRenderer = ({ index, left, top, key, photo }) => (\n    <Photo\n      key={key}\n      index={index}\n      photo={photo}\n      left={left}\n      top={top}\n      onClick={openLightbox}\n    />\n  );\n\nconst parseData=(arrayData)=>{\n  if(!Array.isArray(arrayData)) return null;\n  return arrayData.map((photoData)=>{\n    return {\n      src: get(photoData, \"images.downsized_large.url\"),\n      width: get(photoData, \"images.downsized_large.width\"),\n      height: get(photoData, \"images.downsized_large.height\"),\n      title: get(photoData, \"title\")\n    }\n  });\n};\n  /* API fetch */\n  const getPhotos = async pag => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=svM9aKGJwmCsZrHm3rgnGLSZEMsgZtUQ&q=pizza&limit=5&offset=${LIMIT *\n      pag}&rating=G&lang=en\"`;\n\n    await fetch(url)\n      .then(res => res.json())\n      .then(\n        result => {\n          setIsLoaded(true);\n          const newItems = [\n            ...items,\n           ... parseData(result.data)\n          ];\n          if (get(result, \"pagination.total_count\") !== total) {\n            setTotal(get(result, \"pagination.total_count\"));\n          }\n          setItems(newItems);\n        },\n        // Nota: es importante manejar errores aquí y no en\n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        error => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  };\n\n  useEffect(\n    () => {\n      //función que define el efecto SECUNDARIO\n      getPhotos(pagination);\n    },\n    [pagination]\n  );\n\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n  const openLightbox = useCallback((event, { photo, index }) => {\n    console.log(\"open\");\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...lllllllllllls</div>;\n  } else {\n    return (\n      <div>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={pagination => {\n            getPhotos(pagination);\n          }}\n          hasMore={total > pagination * LIMIT}\n          loader={\n            <div className=\"loader\" key={0}>\n              Loading ...\n            </div>\n          }\n        >\n          <Gallery\n            photos={items}\n            direction={\"column\"}\n            renderImage={imageRenderer}\n          />\n        </InfiniteScroll>\n        <ModalGateway>\n          {viewerIsOpen ? (\n            <Modal onClose={closeLightbox}>\n              <Carousel\n                currentIndex={currentImage}\n                views={items.map(x => ({\n                  ...x,\n                  srcset: x.srcSet,\n                  caption: x.title\n                }))}\n              />\n            </Modal>\n          ) : null}\n        </ModalGateway>\n      </div>\n    );\n  }\n};\n\nexport default Album;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cover from 'components/Cover';\nimport Album from 'components/Album';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cover/>\n      <Album/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}